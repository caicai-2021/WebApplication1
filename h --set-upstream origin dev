[1mdiff --git a/WebApplication1/Controllers/login_test.cs b/WebApplication1/Controllers/login_test.cs[m
[1mindex 4e59e67..596590a 100644[m
[1m--- a/WebApplication1/Controllers/login_test.cs[m
[1m+++ b/WebApplication1/Controllers/login_test.cs[m
[36m@@ -19,6 +19,7 @@[m [musing Newtonsoft.Json;[m
 using System.Web.Helpers;[m
 using Json = Nancy.Json.Json;[m
 using Microsoft.Ajax.Utilities;[m
[32m+[m[32musing System.Text;[m
 [m
 namespace WebApplication1.Controllers[m
 {[m
[36m@@ -62,17 +63,46 @@[m [mnamespace WebApplication1.Controllers[m
             //登录成功返回state=0[m
             else[m
             {[m
[31m-                JavaScriptSerializer suc = new JavaScriptSerializer();[m
[31m-                var json = new {state=0};[m
[31m-                string str2 = suc.Serialize(json);[m
[32m+[m[32m                //var list =new StringBuilder();[m
[32m+[m[32m                //JavaScriptSerializer suc = new JavaScriptSerializer();[m
[32m+[m[32m                //调用get方法来转化表格对象为json格式输出[m
[32m+[m[32m                JObject list = GetJson(dt_1);[m
[32m+[m[32m                var json = new { state = 0 , list };[m
[32m+[m[32m                //将json对象字符串化，后面再继续对象化，感觉有些多次一举[m
[32m+[m[32m                //string str2 = suc.Serialize(json);[m
                 //string jsonData = JsonConvert.SerializeObject(json);[m
                 //将json进行对象化输出，前端接收[m
[31m-                JObject result = JObject.Parse(str2); [m
[31m-                return Ok(result);[m
[32m+[m[32m                //JObject result = JObject.Parse(str2);[m[41m [m
[32m+[m[32m                return Ok(json);[m
             }[m
         }[m
 [m
[31m-       [m
[32m+[m
[32m+[m[32m        //声明一个将表格数据转化为json对象的方法[m
[32m+[m[32m        public static JObject GetJson(DataTable myTable)[m
[32m+[m[32m        {[m
[32m+[m[32m            //定义一个list<string>[m
[32m+[m[32m            List<string> list = new List<string>();[m
[32m+[m[32m            //遍历得到列的名字[m
[32m+[m[32m            foreach (DataColumn col in myTable.Columns)[m
[32m+[m[32m            {[m
[32m+[m[32m                list.Add(col.ColumnName);[m
[32m+[m[32m            }[m
[32m+[m[32m            //定义一个接收行的值[m
[32m+[m[32m            JObject Jtemp = new JObject();[m
[32m+[m[32m            //JObject jb = new JObject();[m
[32m+[m[32m            //JArray ja = new JArray();[m
[32m+[m[32m            foreach (DataRow row in myTable.Rows)[m
[32m+[m[32m            {[m
[32m+[m[41m                [m
[32m+[m[32m                list.ForEach(x => Jtemp.Add(x, row[x].ToString()));[m
[32m+[m[32m                return Jtemp;[m
[32m+[m[32m            }[m
[32m+[m[32m            //jb.Add("rows", ja);[m
[32m+[m[32m            //JObject jb = JObject.Parse(list);[m
[32m+[m[32m            return Jtemp;[m
[32m+[m[32m        }[m
[32m+[m
         //定义json字符串的c#实例化，封装成类，使用转化工具[m
         public class Value[m
         {[m
[1mdiff --git a/WebApplication1/Models/data_to_json.cs b/WebApplication1/Models/data_to_json.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..8a292ff[m
[1m--- /dev/null[m
[1m+++ b/WebApplication1/Models/data_to_json.cs[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m﻿using System;[m
[32m+[m[32musing System.Collections.Generic;[m
[32m+[m[32musing System.Linq;[m
[32m+[m[32musing System.Threading.Tasks;[m
[32m+[m
[32m+[m[32mnamespace WebApplication1.Models[m
[32m+[m[32m{[m
[32m+[m[32m    public class data_to_json[m
[32m+[m[32m    {[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/t b/t[m
[1mnew file mode 100644[m
[1mindex 0000000..0e5aaf3[m
[1m--- /dev/null[m
[1m+++ b/t[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32mdiff.astextplain.textconv=astextplain[m
[32m+[m[32mfilter.lfs.clean=git-lfs clean -- %f[m
[32m+[m[32mfilter.lfs.smudge=git-lfs smudge -- %f[m
[32m+[m[32mfilter.lfs.process=git-lfs filter-process[m
[32m+[m[32mfilter.lfs.required=true[m
[32m+[m[32mhttp.sslbackend=openssl[m
[32m+[m[32mhttp.sslcainfo=D:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt[m
[32m+[m[32mcore.autocrlf=true[m
[32m+[m[32mcore.fscache=true[m
[32m+[m[32mcore.symlinks=false[m
[32m+[m[32mpull.rebase=false[m
[32m+[m[32mcredential.helper=manager-core[m
[32m+[m[32mcredential.https://dev.azure.com.usehttppath=true[m
[32m+[m[32minit.defaultbranch=master[m
[32m+[m[32muser.name=caicai-2021[m
[32m+[m[32muser.email=cai268iou@163.com[m
[32m+[m[32mcredential.helper=store[m
[32m+[m[32mcore.compression=-1[m
[32m+[m[32mhttp.postbuffer=524288000[m
[32m+[m[32mhttp.sslbackend=openssl[m
[32m+[m[32mcore.repositoryformatversion=0[m
[32m+[m[32mcore.filemode=false[m
[32m+[m[32mcore.bare=false[m
[32m+[m[32mcore.logallrefupdates=true[m
[32m+[m[32mcore.symlinks=false[m
[32m+[m[32mcore.ignorecase=true[m
[32m+[m[32mdiff.tool=vsdiffmerge[m
[32m+[m[32mdifftool.prompt=true[m
[32m+[m[32mdifftool.vsdiffmerge.cmd="F:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer\vsdiffmerge.exe" "$LOCAL" "$REMOTE" //t[m
[32m+[m[32mdifftool.vsdiffmerge.keepbackup=false[m
[32m+[m[32mmerge.tool=vsdiffmerge[m
[32m+[m[32mmergetool.prompt=true[m
[32m+[m[32mmergetool.vsdiffmerge.cmd="F:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer\vsdiffmerge.exe" "$REMOTE" "$LOCAL" "$BASE" "$MERGED" //m[m
[32m+[m[32mmergetool.vsdiffmerge.keepbackup=false[m
[32m+[m[32mmergetool.vsdiffmerge.trustexitcode=true[m
[32m+[m[32mremote.origin.url=https://github.com/caicai-2021/-c-.net-core-_files_management.git[m
[32m+[m[32mremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*[m
